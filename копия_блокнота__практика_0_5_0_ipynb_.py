# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EKGsv7oQJET4zw8bG9WeFykaWD6qGNDu

ФИО:
"""

Кучерявин Кирилл Владимирович

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

my_dict = {"Alice": 25, "Bob": 30, "Charlie": 35}
a = input('')
print(a, my_dict[a])

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

a = input('')
a = a.replace(',', '')
a = a.split()
itog = 0
for i in a:
    i = int(i)
    if i > 0 and i % 2 == 0:
        itog += i
print(itog)

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
print('Yellow fruits: ')
for i, k in fruits_and_colors.items():
    if k == 'yellow':
        print(i)

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

my_dict = {"a": 1, "b": 2, "c": 3}
my_dict_1 = {}
for i, k in my_dict.items():
    my_dict_1[k] = i
print(my_dict_1)

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество слов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""

my_list = ['apple','banana','orange','apple','apple','banana']


def num(n):
    words = []
    counts = []
    for i in n:
        if i not in words:
            words.append(i)
            amount = 0
            for k in n:
                if k == i:
                    amount += 1
            counts.append(amount)
    return words, counts
a, b = num(my_list)


new_dict = {}
for i in range(0, len(a)):
    new_dict[a[i]] = b[i]


def find_max(old_dict):
    max_v = 0
    max_k = 0
    for k, v in old_dict.items():
        if v > max_v:
            max_v = v
            max_k = k
    return max_k, max_v


def sortik(old_dict):
    sorted_dict = {}
    while old_dict != {}:
        max_k, max_v = find_max(new_dict)
        sorted_dict[max_k] = max_v
        del old_dict[max_k]
    return sorted_dict


print(sortik(new_dict))

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}


def age(n):
    my_dict = {}
    for i, k in n.items():
        for m, l in k.items():
            if type(l) == int:
                if l > 30:
                    my_dict[i] = l
    return my_dict


def city(n):
    my_dict = {}
    citis = []
    counts = 0
    for i, k in n.items():
        for m, l in k.items():
            if m == 'city':
                citis.append(l)
    for h in citis:
        my_dict[h] = citis.count(h)
    return my_dict


def group_people_by_occupation(people_info):
    occupation_dict = {}

    for person, info in people_info.items():
        occupation = info["occupation"]
        if occupation not in occupation_dict:
            occupation_dict[occupation] = []
        occupation_dict[occupation].append(person)

    return occupation_dict

print('люди старше 30:', age(people_info))
print('список профессий и людей:', group_people_by_occupation(people_info))
print('список городов и кол-во людей:', city(people_info))

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

def add_review(reviews):
    """
    Добавляет отзыв о предметe.

    :param reviews: Словарь, в котором хранятся отзывы.
    """
    subject = input("Введите название предмета: ")
    try:
        rating = int(input("Введите оценку (от 1 до 5): "))
        if rating < 1 or rating > 5:
            print("Ошибка: оценка должна быть от 1 до 5.")
            return
    except ValueError:
        print("Ошибка: введите числовое значение для оценки.")
        return

    comment = input("Введите текст отзыва: ")

    # Добавление отзыва в словарь
    if subject not in reviews:
        reviews[subject] = []
    reviews[subject].append({"rating": rating, "comment": comment})
    print("Отзыв добавлен.")


def view_reviews(reviews):
    """
    Просмотр отзывов о предметах.

    :param reviews: Словарь, в котором хранятся отзывы.
    """
    subject = input("Введите название предмета: ")
    if subject in reviews and reviews[subject]:
        print(f"Отзывы о предмете '{subject}':")
        for i, review in enumerate(reviews[subject]):
            print(f"{i + 1}. Оценка: {review['rating']}, Отзыв: {review['comment']}")
    else:
        print("Нет отзывов для указанного предмета.")


def delete_review(reviews):
    """
    Удаляет отзыв о предметe по индексу.

    :param reviews: Словарь, в котором хранятся отзывы.
    """
    subject = input("Введите название предмета: ")
    if subject in reviews and reviews[subject]:
        print(f"Отзывы о предмете '{subject}':")
        for i, review in enumerate(reviews[subject]):
            print(f"{i + 1}. Оценка: {review['rating']}, Отзыв: {review['comment']}")

        try:
            index = int(input("Введите номер отзыва для удаления: ")) - 1
            if 0 <= index < len(reviews[subject]):
                removed_review = reviews[subject].pop(index)
                print(f"Отзыв '{removed_review['comment']}' удален.")
            else:
                print("Ошибка: введён неправильный индекс.")
        except ValueError:
            print("Ошибка: введите числовое значение для индекса.")
    else:
        print("Нет отзывов для указанного предмета.")


def calculate_average_rating(reviews):
    """
    Вычисляет средний балл по предмету.

    :param reviews: Словарь, в котором хранятся отзывы.
    """
    subject = input("Введите название предмета: ")
    if subject in reviews and reviews[subject]:
        total_rating = sum(review['rating'] for review in reviews[subject])
        average_rating = total_rating / len(reviews[subject])
        print(f"Средний балл по предмету '{subject}': {average_rating:.2f}")
    else:
        print("Нет отзывов для указанного предмета.")


def main():
    reviews = {}
    while True:
        print("\nМеню:")
        print("1. Добавить отзыв")
        print("2. Просмотреть отзывы")
        print("3. Удалить отзыв")
        print("4. Вычислить средний балл")
        print("5. Выход")

        choice = input("Выберите действие (1-5): ")

        if choice == '1':
            add_review(reviews)
        elif choice == '2':
            view_reviews(reviews)
        elif choice == '3':
            delete_review(reviews)
        elif choice == '4':
            calculate_average_rating(reviews)
        elif choice == '5':
            print("Выход из программы.")
            break
        else:
            print("Ошибка: выберите корректное действие.")


print(main())