# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.8.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c51arKpL1BRsY9Fw5WYt5zV4utCM3QTa

# Задание 1

Задача: Создать чат бота для получения информации об исследованиях космоса

Описание: Создайте комплексное приложение командной строки, которое будет использоваться в качестве панели управления исследованиями космоса. Данное приложение будет обращаться к https://api.nasa.gov/ для предоставления пользователям набора информации о космосе, включая:

- Астрономическая картинка дня (APOD): Отображение APOD с пояснениями к нему.
- Фотографии с марсохода: позволяет пользователям выбирать и фильтровать фотографии с марсохода по дате и типу камеры.
- Объекты, сближающиеся с Землей (ОСЗ): Поиск и отображение информации об объекте, сближающихся с Землей, на определенную дату, включая их размеры и потенциальную опасность.
- Данные о космической погоде: Отображают последние данные о космической погоде, включая солнечные вспышки и геомагнитные бури.
Приложение должно позволять пользователям ориентироваться в этих функциях, корректно обрабатывать ошибки и обеспечивать удобство работы.

Требования:
- Пользовательский ввод: Приложение должно предложить пользователю ввести данные, чтобы выбрать, какую функцию он хочет изучить.
- Проверка данных: Убедитесь, что пользовательские данные (например, даты) проверены.
- Обработка ошибок: Корректно обрабатывайте ошибки API и неверные ответы.
- Представление данных: Представляйте данные в четкой и организованной форме.
- Опция выхода: позволяет пользователям выходить из приложения в любое время.
"""

import requests


def get_apod():
  url = "https://api.nasa.gov/planetary/apod"
  params = {
    "api_key": "h5FNa3Rye5PF9rvZDaR8yhsl7uLU23mdDerSohPd"
  }
  response = requests.get(url, params=params)
  data = response.json()
  return data


def get_mars_photos(camera=None):
  sol = 1000
  rover = 'Curiosity'
  API_KEY = 'h5FNa3Rye5PF9rvZDaR8yhsl7uLU23mdDerSohPd'
  BASE_URL = 'https://api.nasa.gov/'
  endpoint = f"{BASE_URL}mars-photos/api/v1/rovers/{rover}/photos"
  params = {
    'sol': sol,
    'camera': camera,
    'api_key': API_KEY
  }
  response = requests.get(endpoint, params=params)
  if response.status_code == 200:
    return response.json()
  else:
    print("Ошибка:", response.status_code, response.text)
    return None


def get_neo_info(date):
  url = "https://api.nasa.gov/neo/rest/v1/feed"
  params = {
    "start_date": date,
    "end_date": date,
    "api_key": "h5FNa3Rye5PF9rvZDaR8yhsl7uLU23mdDerSohPd"
  }
  response = requests.get(url, params=params)
  data = response.json()
  return data


def get_space_weather():
  url = "https://api.nasa.gov/DONKI/notifications"
  params = {
    "api_key": "h5FNa3Rye5PF9rvZDaR8yhsl7uLU23mdDerSohPd"
  }
  response = requests.get(url, params=params)
  data = response.json()
  return data


def main():
  while True:
    print("\nВыберите опцию:")
    print("1. Получить астрономическое изображение дня (APOD)")
    print("2. Получить фотографии марсохода")
    print("3. Получить информацию о околоземных объектах (NEO)")
    print("4. Получить данные о космической погоде")
    print("5. Выход")

    choice = input("Введите ваш выбор: ")

    if choice == "1":
      apod_data = get_apod()
      print(apod_data)
    elif choice == "2":
      camera = input("Введите камеру: ")
      mars_rover_data = get_mars_photos(camera=camera)
      print(mars_rover_data)
    elif choice == "3":
      date = input("Введите дату (ГГГГ-ММ-ДД): ")
      neo_data = get_neo_info(date)
      print(neo_data)
    elif choice == "4":
      space_weather_data = get_space_weather()
      print(space_weather_data)
    elif choice == "5":
      print("До свидания!")
      break
    else:
      print("Неверный выбор. Попробуйте снова.")


main()

"""# Задание 2

Описание задачи

Цель этой задачи - создать скрипт на Python, который взаимодействует с API Чикагского института искусств (https://api.artic.edu/docs/) для извлечения и отображения произведений искусства. Скрипт должен позволять пользователям просматривать работы по страницам, фильтровать их по имени художника и просматривать подробную информацию о выбранных произведениях искусства. Ниже приведены требования и функциональные возможности, которые необходимо реализовать:

Требования:
Извлекать произведения искусства:

- Создайте функцию, которая извлекает список произведений искусства из API Чикагского института искусств.
Функция должна принимать параметр page для разбивки на страницы и возвращать список произведений искусства вместе с информацией о разбивке на страницы.
Фильтровать произведения искусства:

- Реализуйте функцию, которая фильтрует список произведений искусства на основе имени указанного художника. Функция должна возвращать список работ, которые соответствуют имени художника (без учета регистра).
Отображать подробную информацию об оформлении:

- Напишите функцию, которая отображает названия работ для пользователя и позволяет ему выбрать одну из них, введя соответствующий номер.
После выбора функция должна отображать подробную информацию о выбранном произведении, включая название, исполнителя, дату и носитель.
Разбивка на страницы и взаимодействие с пользователем:

- Создайте основную функцию, которая управляет выборкой произведений и взаимодействием с пользователем.

Разрешите пользователям перемещаться по страницам с произведениями искусства, выполнять фильтрацию по исполнителю или выходить из программы.

Если страниц с произведениями искусства несколько, укажите варианты перехода к следующей странице, предыдущей странице, фильтрации по исполнителю или выхода из программы.
"""

import requests


def get_artworks(page):
    url = "https://api.artic.edu/api/v1/artworks"
    params = {"page": page}
    response = requests.get(url, params=params)
    data = response.json()
    artworks = data["data"]
    total_pages = data["pagination"]["total_pages"]

    return artworks, total_pages


def filter_artworks_by_artist(artworks, artist_name):
    filtered_artworks = []
    for artwork in artworks:
        if artist_name.lower() in artwork["artist_title"].lower():
            filtered_artworks.append(artwork)

    return filtered_artworks


def display_artwork_details(artwork):
    print("Title:", artwork["title"])
    print("Artist:", artwork["artist_title"])
    print("Date:", artwork["date_display"])
    if "thumbnail" in artwork["image_id"]:
        print("Image URL:", f"https://www.artic.edu/iiif/2/{artwork['image_id']}/full/843,/0/default.jpg")
    print("\n")


def main():
    page = 1
    while True:
        artworks, total_pages = get_artworks(page)
        print('страница', page)
        for index, artwork in enumerate(artworks, start=1):
            print(f"{index}. {artwork['title']} by {artwork['artist_title']}")
        option = input('Введите номер иллюстрации, чтобы просмотреть подробности, "n" для следующей страницы, "p" для предыдущей страницы, "f" для фильтрации по художнику или "q" для выхода:')

        if option.isdigit():
            selected_artwork = artworks[int(option)-1]
            display_artwork_details(selected_artwork)
        elif option.lower() == 'n' and page < total_pages:
            page += 1
        elif option.lower() == 'p' and page > 1:
            page -= 1
        elif option.lower() == 'f':
            artist_name = input("Введите имя артиста: ")
            artworks = filter_artworks_by_artist(artworks, artist_name)
        elif option.lower() == 'q':
            break
        else:
            print("Неверные параметры")


main()

"""# Задание 3

Задача: Создать программу по управлению портфелем криптовалют

Цель: Создать скрипт на Python, который извлекает цены на криптовалюты в режиме реального времени, позволяет пользователям управлять портфелем криптовалют, вычисляет общую стоимость портфеля, отслеживает изменения цен и предоставляет исторические данные о ценах для анализа.

Требования:
Получение текущих цен на криптовалюты:

Используйте https://docs.coingecko.com/ для получения актуальных цен на список криптовалют.

Управление портфелем:

- Позволяет пользователю создавать портфель криптовалют и управлять им, указывая количество каждой криптовалюты, которой он владеет.
- Расчитывает общую стоимость портфеля в указанной фиатной валюте (например, долларах США).

Отслеживание изменения цен:

- Отображение процентного изменения цены для каждой криптовалюты в портфеле за последние 24 часа.
- Выделите все криптовалюты, стоимость которых значительно увеличилась или снизилась.

Поиск исторических данных о ценах:

- Получение исторических данных о ценах на указанную криптовалюту за последнюю неделю.
- Предоставьте пользователю возможность визуализировать эти данные в простом текстовом формате (например, цены за день).

Взаимодействие с пользователем:

- Реализуйте интерфейс командной строки для ввода данных пользователем.
- Предоставьте опции для получения текущих цен, управления портфелем, просмотра изменений цен или анализа исторических данных.
"""

import requests
import pandas as pd

def get_crypto_data(crypto_id):
  url = f'https://api.coingecko.com/api/v3/simple/price?ids={crypto_id}&vs_currencies=usd&include_24hr_change=true'
  response = requests.get(url)
  return response.json()[crypto_id]

def add_crypto_to_portfolio(portfolio, crypto_id, amount):
  portfolio[crypto_id] = portfolio.get(crypto_id, 0) + amount
  return portfolio

def get_total_portfolio_value(portfolio):
  return sum(get_crypto_data(crypto_id)['usd'] * amount
        for crypto_id, amount in portfolio.items())

def display_portfolio(portfolio):
  print("Ваш криптовалютный портфель:")
  for crypto_id, amount in portfolio.items():
    data = get_crypto_data(crypto_id)
    print(f"{crypto_id.capitalize()}: Количество: {amount}, Текущая цена: ${data['usd']}, Изменение за 24 часа: {data['usd_24h_change']:.2f}%")

def get_historical_prices(crypto_id):
  url = f'https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart?vs_currency=usd&days=7'
  response = requests.get(url)
  data = response.json()
  prices = pd.DataFrame(data['prices'], columns=['timestamp', 'price'])
  prices['timestamp'] = pd.to_datetime(prices['timestamp'], unit='ms')
  prices.set_index('timestamp', inplace=True)
  return prices

def visualize_historical_prices(crypto_id):
  prices = get_historical_prices(crypto_id)
  print(f"Исторические цены для {crypto_id} за последнюю неделю:")
  print(prices['price'])

def main():
  portfolio = {}
  while True:
    print("\nОпции:")
    print("1. Добавить криптовалюту в портфель")
    print("2. Отобразить портфель")
    print("3. Рассчитать общую стоимость")
    print("4. Показать исторические цены")
    print("5. Выход")
    choice = input("Выберите опцию: ")

    if choice == "1":
      crypto_id = input("Введите ID криптовалюты (например, bitcoin): ")
      amount = float(input("Введите количество: "))
      portfolio = add_crypto_to_portfolio(portfolio, crypto_id, amount)
    elif choice == "2":
      display_portfolio(portfolio)
    elif choice == "3":
      total_value = get_total_portfolio_value(portfolio)
      print(f"Общая стоимость портфеля: ${total_value:.2f}")
    elif choice == "4":
      crypto_id = input("Введите ID криптовалюты, чтобы увидеть исторические цены: ")
      visualize_historical_prices(crypto_id)
    elif choice == "5":
      break
    else:
      print("Неверный выбор. Попробуйте снова.")

main()

"""# Дополнительно: Задание 4

Задание 4: Проектное

Вам необходимо самостоятельно найти откртое API предоставляющее информацию в открытом доступе и реализовать собственный проект!


Критерии приемки результата:

- Проект включает в себя не менее 5 возможостей для пользователя
- Проект позволяет использовать все возможности проекта пользователю при помощи взаимодействия через коммандную строку
- Проект работает с открытым API (это значит что при проверке вашей работы преподавателем, преподавателю необходимо просто запустить ячейку с кодом вашего проекта и она будет работать без дополнительных манипуляции)
- Проект должен обязательно включать в себя ряд используемых конструкции:
    - Функции
    - Условные конструкции
    - Ввод/вывод
    - Словари/Списки
- Допускается использование библиотек:
    - requests
    - datetime
    - random

**Здесь добавьте описание вашего проекта**
"""

#  А здесь код