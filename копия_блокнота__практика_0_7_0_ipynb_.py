# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.7.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zt8hgdFIBtvT6Gcx0tyOS7-Poew-ZxM_

Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)

ФИО:
"""

Кучерявин Кирилл Владимирович

"""## Задание 1. HTTP-запросы, ответы и погода

Описание:

Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.

Можно использовать API: https://open-meteo.com/. Используйте метод GET.


Ввод
```
56.50, 60.35
```

Вывод
```
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
```
"""



import requests
from datetime import datetime



def send_request(url):
    response = requests.get(url)

    status_code = response.status_code
    if status_code == 200:
        return response.json()
    return None


def clear_data(data):
    current_date = datetime.today().date()
    current_date = f'{current_date.day}.{current_date.month}'

    temperature = data['current']['temperature_2m']
    temperature_format = data['current_units']['temperature_2m']

    weather_code = data['current']['weather_code']

    if weather_code in [0, 1]:
        weather = 'нет осадков, ясно'
    elif weather_code == 45:
        weather = 'нет осадков, туман'
    elif weather_code in [61, 63, 65 ,71 ,73, 75]:
        weather = 'возможны осадки, нет тумана'
    else:
        weather = 'не знаю, не был сегодня на улице'

    message = f'Сегодня ({current_date}) погода {temperature} {temperature_format}, {weather}'

    return message


def main():
    coordinates = input('Введите ваши координаты: ').split(', ')
    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code&forecast_days=1'
    data = send_request(url)
    message = clear_data(data)
    print(message)


main()

"""## Задание 2. HTTP-запросы, ответы и покемоны

**Описание:**


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

# @title Текст заголовка по умолчанию
import requests


def send_request(url):
    response = requests.get(url)

    status_code = response.status_code
    if status_code == 200:
        return response.json()
    return None


def name_pocemon(send):
    url_pocemon = []
    name_poc = []
    for k,v in send.items():
      if k == 'results':
          for i in v:
              for m, n in i.items():
                if m == 'name':
                  name_poc.append(n)
                if m == 'url':
                  url_pocemon.append(n)
    return name_poc


def one_pocemon(name):
    url_new = f"https://pokeapi.co/api/v2/pokemon/{name}"
    info = send_request(url_new)

    return info


url = 'https://pokeapi.co/api/v2/pokemon'

print(name_pocemon(send_request(url)))
name = input('')
info_list = [name]
a = one_pocemon(name)

for k, v in a.items():
        if k == 'height':
            info_list.append(v)
        if k == 'weight':
            info_list.append(v)
        if k == 'abilities':
            info_list.append(v)
        if k == 'types':
            info_list.append(v)

print('name:', info_list[0])
print('abilities:', info_list[1])
print('height:', info_list[2])
print('type:', info_list[3])
print('weight:', info_list[4])

"""## Задание 3. HTTP-запросы, ответы и посты

**Описание:**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

import requests


def get_posts():
    url = "https://jsonplaceholder.typicode.com/posts"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print("Ошибка:", response.status_code)
        return None


def get_post_by_id(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print("Ошибка", response.status_code)
        return None


def display_post_info(post):
    if post:
        print("Post ID:", post.get("id"))
        print("User  ID:", post.get("userId"))
        print("Title:", post.get("title"))
        print("Body:", post.get("body"))
    else:
        print("No post data to display.")


print(get_posts())
id = input('')
print(get_post_by_id(id))
display_post_info(get_post_by_id(id))

"""## Задание 4. HTTP-запросы, ответы и работа с постами

**Описание**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests


def get_posts():
    url = "https://jsonplaceholder.typicode.com/posts"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print("Ошибка:", response.status_code)
        return None


def get_post_by_id(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print("Ошибка: ", response.status_code)
        return None


def display_post_info(post):
    if post:
        print("Post ID:", post.get("id"))
        print("User  ID:", post.get("userId"))
        print("Title:", post.get("title"))
        print("Body:", post.get("body"))
    else:
        print("No post data to display.")


def create_post(title, body, user_id):
    url = "https://jsonplaceholder.typicode.com/posts"
    post_data = {
        "title": title,
        "body": body,
        "userId": user_id
    }
    response = requests.post(url, json=post_data)

    if response.status_code == 201:
        return response.json()
    else:
        print("Error creating post:", response.status_code)
        return None


def update_post(post_id, title, body):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    updated_data = {
        "title": title,
        "body": body
    }
    response = requests.put(url, json=updated_data)

    if response.status_code == 200:
        return response.json()
    else:
        print("Error updating post:", response.status_code)
        return None


def delete_post(post_id):
    url = f"https://jsonplaceholder.typicode.com/posts/{post_id}"
    response = requests.delete(url)

    return response.status_code



def main():
    posts = get_posts()

    if posts:
        first_post = get_post_by_id(posts[0]['id'])
        display_post_info(first_post)

    title = input("Заголовок: ")
    body = input("Содержимое поста: ")
    user_id = int(input("ID пользователя: "))
    new_post = create_post(title, body, user_id)
    if new_post:
        print("Созданный пост:", new_post)

    post_id_to_update = int(input("Введите ID поста для обновления: "))
    new_title = input("Новый заголовок: ")
    new_body = input("Новое содержимое: ")
    updated_post = update_post(post_id_to_update, new_title, new_body)
    if updated_post:
        print("Обновленный пост:", updated_post)

    post_id_to_delete = int(input("Введите ID поста для удаления: "))
    status_code = delete_post(post_id_to_delete)
    if status_code == 200:
        print("Пост успешно удален.")
    else:
        print("Ошибка при удалении поста:", status_code)

main()

"""## Задание 5. HTTP-запросы, ответы и пёсики

**Описание**

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

*Подсказка*



```
import requests
from PIL import Image
from IPython.display import display
import io

url = <____>
response = <____>
        
if response.<______> == <___>:
      image_url = response.json()['message']

res = requests.<__>(image_url)
img = Image.open(io.BytesIO(res.content))
display(img)
```
"""

import requests
from PIL import Image
from IPython.display import display
import io

def full_list():
    url = "https://dog.ceo/api/breeds/list/all"
    response = requests.get(url)
    a = 1
    list_dog = []

    if response.status_code == 200:
        for k, v in response.json().items():
            if k == 'message':

                for i, n in v.items():
                    list_dog.append(f'{a}.{i}')

                    a = a + 1

    return list_dog


def one_dog():
    input_dog = input('').split(', ')

    for i in input_dog:
      url = f"https://dog.ceo/api/breed/{i}/images/random"
      response = requests.get(url)

      if response.status_code == 200:
          print(response.json())
          image_url = response.json()['message']

          res = requests.get(image_url)
          img = Image.open(io.BytesIO(res.content))
          display(img)


print(full_list())
print(one_dog())