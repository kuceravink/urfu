# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VEW_d2CxD8PC0bnHsNWPLWaSM3cuwA2X

Введите ваше ФИО:
"""

Кучерявин Кирилл Владимирович

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

def shop(a, b, c):


    if b > 1000 and c != 'SUPERDISCOUNT':
        m = ((a*b)/100)*95
        n = 5
    if b > 1000 and c == 'SUPERDISCOUNT':
        m = ((a*b)/100)*90
        n = 10
    if b < 1000:
        m = (a*b)
        n = 0
    if b > 5000 and c != 'SUPERDISCOUNT':
        m = ((a*b)/100)*85
        n = 15
    if b > 5000 and c == 'SUPERDISCOUNT':
        m = ((a*b)/100)*80
        n = 20
    print('Ваша скидка: ', n)


    return m
a = int(input('Введите стоимость единицы товара: '))
b = int(input('Введите количество товара: '))
c = input('Введите промокод:  ')
v = shop(a, b, c)
print('Итоговая сумма: ', v)

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

def plus(a):
    b = []
    for i in a:
        if int(i) > 0:
            b.append(i)
    return b


a = input().split()
print(*plus(a))

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

def nod(a, b):
    while a != 0 and b != 0:
        if a > b:
            a = a % b
        else:
            b = b % a
    return a + b


m = input().split()
print(nod(int(m[0]), int(m[1])))



"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

def schet(a):
    txt = a.lower().split()
    word_count = {}
    for i in txt:
        if i in word_count:
            word_count[i] += 1
        else:
            word_count[i] = 1
    return word_count
a = input('')
print(schet(a))

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def anagram(a):
    for i in range(0, len(a[1])):
        if a[1][i] in a[0] and len(a[0]) == len(a[1]):
            return True
        else:
            return False


a = input().split(', ')
print(anagram(a))

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

alphabet = [chr(i) for i in range(97, 123)]

def shifr(a, b):
    for i in a:
        if i == ' ':
          continue
        if alphabet.index(i) + b < 26:
            a = a.replace(i, alphabet[alphabet.index(i) + b])
        else:
            m = (alphabet.index(i) + (b - 26))
            a = a.replace(i, alphabet[m])
    return a


a = input('Введите сообщение(можно использовать только английские буквы и пробелы): ').lower()
b = int(input('Введите значение сдвига(от 0 до 26): '))
print(shifr(a, b))

"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

accounts = []
transactions = []


def create_account():
    account_name = input("Введите имя для нового счета: ")
    initial_balance = float(input("Введите начальный баланс: "))
    accounts.append([account_name, initial_balance])
    print(f"Счет '{account_name}' успешно создан с балансом {initial_balance:.2f}.")


def deposit():
    account_name = input("Введите имя счета для внесения: ")
    amount = float(input("Введите сумму для внесения: "))

    for account in accounts:
        if account[0] == account_name:
            account[1] += amount
            transactions.append(f"Внесение: Счет '{account_name}', Сумма: {amount:.2f}")
            print(f"На счет '{account_name}' внесено {amount:.2f}. Новый баланс: {account[1]:.2f}.")
            return

    print("Счет не найден.")


def withdraw():
    account_name = input("Введите имя счета для снятия: ")
    amount = float(input("Введите сумму для снятия: "))

    for account in accounts:
        if account[0] == account_name:
            if account[1] >= amount:
                account[1] -= amount
                transactions.append(f"Снятие: Счет '{account_name}', Сумма: {amount:.2f}")
                print(f"Со счета '{account_name}' снято {amount:.2f}. Новый баланс: {account[1]:.2f}.")
                return
            else:
                print("Недостаточно средств на счете.")
                return

    print("Счет не найден.")


def check_balance():
    account_name = input("Введите имя счета для проверки баланса: ")

    for account in accounts:
        if account[0] == account_name:
            print(f"Баланс счета '{account_name}': {account[1]:.2f}")
            return

    print("Счет не найден.")


def transfer():
    from_account = input("Введите имя исходного счета: ")
    to_account = input("Введите имя целевого счета: ")
    amount = float(input("Введите сумму для перевода: "))

    from_found = to_found = False

    for account in accounts:
        if account[0] == from_account:
            from_found = True
            if account[1] >= amount:
                account[1] -= amount
            else:
                print("Недостаточно средств на исходном счете.")
                return

        if account[0] == to_account:
            to_found = True
            account[1] += amount

    if from_found and to_found:
        transactions.append(f"Перевод: Из счета '{from_account}' в счет '{to_account}', Сумма: {amount:.2f}")
        print(f"Перевод {amount:.2f} с '{from_account}' на '{to_account}' успешен.")
    else:
        if not from_found:
            print("Исходный счет не найден.")
        if not to_found:
            print("Целевой счет не найден.")


def print_transactions():
    if transactions:
        print("История транзакций:")
        for transaction in transactions:
            print(transaction)
    else:
        print("История транзакций пуста.")


def main():
    while True:
        print("\nБанковская система:")
        print("1. Создать новый счет")
        print("2. Внести деньги на счет")
        print("3. Снять деньги со счета")
        print("4. Проверить баланс")
        print("5. Перевести деньги между счетами")
        print("6. Печать истории транзакций")
        print("7. Выход")

        choice = input("Выберите действие (1-7): ")

        if choice == '1':
            create_account()
        elif choice == '2':
            deposit()
        elif choice == '3':
            withdraw()
        elif choice == '4':
            check_balance()
        elif choice == '5':
            transfer()
        elif choice == '6':
            print_transactions()
        elif choice == '7':
            print("Выход из программы.")
            break
        else:
            print("Ошибка: выберите корректное действие.")


print(main())