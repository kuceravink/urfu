# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 1.0.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y60DQJD7zhFH1F8Y-yayTJyhvDd4N6-K

ФИО:

# Задание (совместное с преподавателем)

Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.
Для этого создайте класс Employee со следующими методами:

- Метод consume_vacation должен отвечать за списание дней отпуска.

Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).

При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.

Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.

- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```


Чтобы проверить работу программы:
1. Создайте экземпляр класса Employee.
2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.
3. Вызовите метод get_vacation_details.
"""

class Employee:
    vocation_days = 28

    def __init__(self, first_name, second_name, gender):
        self.first_name = first_name
        self.second_name = second_name
        self.gender = gender
        self.remeining_vocation_days = self.vocation_days

    def consume_vocation(self, days):
        self.remeining_vocation_days -= days

    def get_vocation_details(self):
        return f"Остаток дней отпуска: {self.remeining_vocation_days}"

employee1 = Employee('Иван', 'Иванов', 'м')


print(employee1.first_name, 'уехал на 6 дней')
employee1.consume_vocation(6)
print(employee1.get_vocation_details())

"""# Задание 1

Задание:

Создайте класс с именем Rectangle который имеет:
- Атрибуты ширины и высоты.
- Метод расчета площади.
- Метод расчета периметра.
- Метод отображения размеров прямоугольника.

Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность.
"""

class Rectangle:
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def square(self):
        return f"Площадь прямоугольника: {(self.width * self.height)}"

    def perimeter(self):
        return f"Периметр прямоугольника: {2*(self.width + self.height)}"

    def size(self):
        return f"Ширина:{self.width}, Высота:{self.height}"

rectangle = Rectangle(10, 10)

print(rectangle.size())
print(rectangle.square())
print(rectangle.perimeter())

"""# Задание 2

Задание: Создайте мини версию банковской системы:


Инструкции:

1. Создайте класс BankAccountсо следующими атрибутами:
    - account_holder -  владелец счета
    - balance - баланс счета

2. Реализуйте следующие методы:
    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.
    - deposit(amount): Добавьте указанную сумму к балансу.
    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.
    - get_balance(): Возврат текущего баланса.


Создайте объект класса и продемонстрируйте его возможности
"""

class BankAccountco:

  def __init__(self, account_holder):
    self.account_holder = account_holder
    self.balance = 0.0

  def deposit(self, amount):
    if amount > 0:
      self.balance += amount
      print(f"Успешно внесено {amount:.2f}. Текущий баланс: {self.balance:.2f}")
    else:
      print("Нельзя внести отрицательную сумму.")

  def withdraw(self, amount):
    if amount > 0:
      if self.balance >= amount:
        self.balance -= amount
        print(f"Успешно снято {amount:.2f}. Текущий баланс: {self.balance:.2f}")
      else:
        print("Недостаточно средств на счете.")
    else:
      print("Нельзя снять отрицательную сумму.")

  def get_balance(self):
    return self.balance


my_account = BankAccountco("Иван Иванов")

print(f"Владелец счета: {my_account.account_holder}")
print(f"Начальный баланс: {my_account.get_balance():.2f}")

my_account.deposit(1000.0)
my_account.withdraw(500.0)
my_account.withdraw(700.0)
my_account.deposit(-100)
my_account.withdraw(-100)

print(f"Текущий баланс: {my_account.get_balance():.2f}")

"""# Задание 3

Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов
"""

import random

class Fighter:
    def __init__(self, name, health, damage):
        self.name = name
        self.health = health
        self.damage = damage

    def attack(self, other):
        other.health -= random.randint(0, self.damage)

    def is_alive(self):
        return self.health > 0

    def __str__(self):
        return f"{self.name}: {self.health}/{self.damage}"


class Knight(Fighter):
    def __init__(self, name, armor, weapon):
        super().__init__(name, 100, random.randint(5, 15))


class Dragon(Fighter):
    def __init__(self):
        super().__init__("Дракон", 80, random.randint(10, 20))


def battle(f1, f2):
    print(f"{f1.name} vs {f2.name}")
    while f1.is_alive() and f2.is_alive():
        f1.attack(f2); f2.attack(f1)
        print(f1, f2)
    print(f"{f1.name if f1.is_alive() else f2.name} победил!")


def main():
    k = Knight(input("Имя рыцаря: "), "", "")
    d = Dragon()
    battle(k,d)

if __name__ == "__main__":
    main()

"""# Дополнительное задание

Задача: Система управления библиотекой

**Цель**
Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.

**Требования**

1. **Определение класса**:
   – Создайте класс с именем «Book» со следующими атрибутами:
     - `title`
     - `автор`
     - `isbn`
     - `is_borrowed` (по умолчанию `False`)

2. **Класс библиотеки**:
   - Создайте класс с именем Library, который управляет коллекцией книг.
   - Класс должен иметь следующие методы:
     - `__init__(self)`: инициализирует пустой список книг.
     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.
     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.
     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.
     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.
     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.

3. **Взаимодействие с пользователем**:
   - Создайте простое текстовое меню, которое позволит пользователям:
     - Добавить книгу
     - Одолжить книгу
     - Вернуть книгу
     - Список доступных книг
     - Выйти из программы
"""

